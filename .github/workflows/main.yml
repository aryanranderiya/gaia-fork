name: Quality Checks

on:
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

jobs:
  frontend-build:
    # if: ${{ contains(github.event.pull_request.changed_files, 'frontend/') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22.15.1"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"

      - name: Install dependencies
        run: |
          pnpm install --no-frozen-lockfile
          pnpm install
      - name: Create Build
        env:
          NEXT_PUBLIC_API_BASE_URL: "http://fake-api-for-build.example.com"
        run: pnpm build

  backend-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          # This creates the venv and installs all dependencies from pyproject.toml
          uv sync
          # Install mypy types
          uv run mypy --install-types --non-interactive
          # Install pre-commit hooks
          uv run pre-commit install

      - name: Set up pre-commit cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit checks
        run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Run pre-commit
          echo "Running pre-commit checks..."
          if ! uv run pre-commit run --all-files --show-diff-on-failure; then
            echo "Pre-commit checks failed. Checking for auto-fixable issues..."

            # Check if there are changes after pre-commit
            if ! git diff --exit-code; then
              echo "Files were modified by pre-commit hooks. Changes:"
              git diff --name-only

              # Only commit and push if we have write permissions and it's a PR
              if [ "${{ github.event_name }}" = "pull_request" ]; then
                # Add and commit changes
                git add .
                git commit -m "ci(auto-fix): Apply pre-commit hooks formatting"

                # Push the changes back to the PR branch
                git push origin HEAD:${{ github.head_ref }}

                echo "✅ Auto-applied formatting fixes and pushed to PR"
              else
                echo "❌ Formatting issues found but not in PR context"
                exit 1
              fi
            else
              echo "❌ Pre-commit failed but no files were modified"
              exit 1
            fi
          else
            echo "✅ All pre-commit checks passed"
          fi