services:
  # FastAPI Application
  gaia:
    container_name: gaia
    build: .
    image: gaia
    working_dir: /app
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "80",
        "--reload",
      ]
    environment:
      DEBUG: 1
      PYTHONUNBUFFERED: 1
      FORCE_COLOR: 1
    env_file:
      - .env
    volumes:
      - .:/app
    ports:
      - "8000:80"
    restart: on-failure
    tty: true
    stdin_open: true
    depends_on:
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - gaia_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    # profiles: ["dev"]
    image: postgres:alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres #pragma: allowlist secret
      POSTGRES_DB: langgraph
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - gaia_network

  # RabbitMQ Service
  rabbitmq:
    profiles: ["celery"]
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP protocol
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: on-failure
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - gaia_network

  # Celery Worker
  celery_worker:
    profiles: ["celery"]
    container_name: celery_worker
    image: gaia
    working_dir: /app
    env_file:
      - .env
    command:
      [
        "python",
        "-m",
        "celery",
        "-A",
        "app.worker",
        "worker",
        "--loglevel=info",
      ]
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    networks:
      - gaia_network

  # ChromaDB Service
  chromadb:
    # image: chromadb/chroma:latest
    image: chromadb/chroma:1.0.0
    container_name: chromadb
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - PERSIST_DIRECTORY=/chroma/chroma
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_PORT=8000
    ports:
      - "8080:8000"
    restart: on-failure
    healthcheck:
      test:
        ["CMD", "/bin/bash", "-c", "cat < /dev/null > /dev/tcp/localhost/8000"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - gaia_network

  # Redis Service
  redis:
    profiles: ["dev"]
    image: redis:alpine
    container_name: redis
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data:/data
    restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - gaia_network

  # MongoDB Service
  mongo:
    profiles: ["dev"]
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: on-failure
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - gaia_network

  # Mongo Express Service
  mongo_express:
    profiles: ["dev"]
    image: mongo-express:latest
    container_name: mongo_express
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin #pragma: allowlist secret
      ME_CONFIG_BASICAUTH_PASSWORD: password #pragma: allowlist secret
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - gaia_network

volumes:
  rabbitmq_data:
  chroma_data:
  redis_data:
  mongo_data:
  pgdata:

networks:
  gaia_network:
    driver: bridge
